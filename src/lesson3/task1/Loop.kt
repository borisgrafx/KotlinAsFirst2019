@file:Suppress("UNUSED_PARAMETER")

package lesson3.task1

import kotlin.math.sqrt
import kotlin.math.max
import kotlin.math.pow
import kotlin.math.abs
import kotlin.math.PI

/**
 * Пример
 *
 * Вычисление факториала
 */
fun factorial(n: Int): Double {
    var result = 1.0
    for (i in 1..n) {
        result = result * i // Please do not fix in master
    }
    return result
}

/**
 * Пример
 *
 * Проверка числа на простоту -- результат true, если число простое
 */
fun isPrime(n: Int): Boolean {
    if (n < 2) return false
    if (n == 2) return true
    if (n % 2 == 0) return false
    for (m in 3..sqrt(n.toDouble()).toInt() step 2) {
        if (n % m == 0) return false
    }
    return true
}

/**
 * Пример
 *
 * Проверка числа на совершенность -- результат true, если число совершенное
 */
fun isPerfect(n: Int): Boolean {
    var sum = 1
    for (m in 2..n / 2) {
        if (n % m > 0) continue
        sum += m
        if (sum > n) break
    }
    return sum == n
}

/**
 * Пример
 *
 * Найти число вхождений цифры m в число n
 */
fun digitCountInNumber(n: Int, m: Int): Int =
    when {
        n == m -> 1
        n < 10 -> 0
        else -> digitCountInNumber(n / 10, m) + digitCountInNumber(n % 10, m)
    }

/**
 * Простая
 *
 * Найти количество цифр в заданном числе n.
 * Например, число 1 содержит 1 цифру, 456 -- 3 цифры, 65536 -- 5 цифр.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun digitNumber(n: Int): Int {
    var l = abs(n)
    var k = 1
    while (l > 9) {
        l /= 10
        k += 1
    }
    return k
}

/**
 * Простая
 *
 * Найти число Фибоначчи из ряда 1, 1, 2, 3, 5, 8, 13, 21, ... с номером n.
 * Ряд Фибоначчи определён следующим образом: fib(1) = 1, fib(2) = 1, fib(n+2) = fib(n) + fib(n+1)
 */

//Тут пока долго делается. До октябрьской проверки попробую придумать метод оптимизации.
fun fib(n: Int): Int = if (n < 3) 1 else (fib(n - 2) + fib(n - 1))


/**
 * Простая
 *
 * Для заданных чисел m и n найти наименьшее общее кратное, то есть,
 * минимальное число k, которое делится и на m и на n без остатка
 */
fun lcm(m: Int, n: Int): Int {
    var m1 = m
    var n1 = n
    while (m1 != n1) {
        if (m1 > n1)
            m1 -= n1
        else
            n1 -= m1
    }
    return m * n / m1
}


/**
 * Простая
 *
 * Для заданного числа n > 1 найти минимальный делитель, превышающий 1
 */
fun minDivisor(n: Int): Int {

    for (i in 2..sqrt(n.toDouble()).toInt())
        if (n % i == 0)
            return i
    return n
}


/**
 * Простая
 *
 * Для заданного числа n > 1 найти максимальный делитель, меньший n
 */
fun maxDivisor(n: Int): Int = n / minDivisor(n)


/**
 * Простая
 *
 * Определить, являются ли два заданных числа m и n взаимно простыми.
 * Взаимно простые числа не имеют общих делителей, кроме 1.
 * Например, 25 и 49 взаимно простые, а 6 и 8 -- нет.
 */
fun isCoPrime(m: Int, n: Int): Boolean {
    var k = true
    for (i in 2..max(m, n))
        if ((m % i == 0) && (n % i == 0))
            k = false
    return k
}

/**
 * Простая
 *
 * Для заданных чисел m и n, m <= n, определить, имеется ли хотя бы один точный квадрат между m и n,
 * то есть, существует ли такое целое k, что m <= k*k <= n.
 * Например, для интервала 21..28 21 <= 5*5 <= 28, а для интервала 51..61 квадрата не существует.
 */
fun squareBetweenExists(m: Int, n: Int): Boolean {
    //Тут пока долго делается. До октябрьской проверки попробую придумать метод оптимизации.
    var k = false
    for (i in m..n)
        if ((sqrt(i.toDouble()).toInt()) * (sqrt(i.toDouble()).toInt()) == i)
            k = true
    return k
}

/**
 * Средняя
 *
 * Гипотеза Коллатца. Рекуррентная последовательность чисел задана следующим образом:
 *
 *   ЕСЛИ (X четное)
 *     Xслед = X /2
 *   ИНАЧЕ
 *     Xслед = 3 * X + 1
 *
 * например
 *   15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1 4 2 1 4 2 1 ...
 * Данная последовательность рано или поздно встречает X == 1.
 * Написать функцию, которая находит, сколько шагов требуется для
 * этого для какого-либо начального X > 0.
 */
fun collatzSteps(x: Int): Int {
    var k = 0
    var l = x
    while (l != 1) {
        if (l % 2 == 0)
            l /= 2
        else
            l = 3 * l + 1
        k += 1
    }
    return k
}

/**
 * Средняя
 *
 * Для заданного x рассчитать с заданной точностью eps
 * sin(x) = x - x^3 / 3! + x^5 / 5! - x^7 / 7! + ...
 * Нужную точность считать достигнутой, если очередной член ряда меньше eps по модулю.
 * Подумайте, как добиться более быстрой сходимости ряда при больших значениях x.
 * Использовать kotlin.math.sin и другие стандартные реализации функции синуса в этой задаче запрещается.
 */
fun sin(x: Double, eps: Double): Double = TODO()

// К сожалению, алгоритм пока не работает((( Но где я ошибся?!
// upd: До сих пор не работает, хотя я напряг мозги и попытался вспомнить тригонометрию с её  2 * PI
// и некой цикличностью sin. Нужна помощь!
// P.S. пока мой алгоритм подразумевает, что sin при любом x будет положителен. Исправлю это, когда будут нормально
// проходить тесты там, где sin ДОЛЖЕН быть положительным.
/*{
var sinus: Double = x % (2 * PI)
var k = 3
var n = 2 * 3
var second = false
while (abs((x % (2 * PI)).pow(k) / n) >= abs(eps)) {
if (!second) {
sinus -= abs((x % (2 * PI)).pow(k)) / n
second = true
} else {
sinus += abs((x % (2 * PI)).pow(k)) / n
second = false
}
k += 2
n *= (k - 1) * k
}
return sinus
}
*/

/**
 * Средняя
 *
 * Для заданного x рассчитать с заданной точностью eps
 * cos(x) = 1 - x^2 / 2! + x^4 / 4! - x^6 / 6! + ...
 * Нужную точность считать достигнутой, если очередной член ряда меньше eps по модулю
 * Подумайте, как добиться более быстрой сходимости ряда при больших значениях x.
 * Использовать kotlin.math.cos и другие стандартные реализации функции косинуса в этой задаче запрещается.
 */
fun cos(x: Double, eps: Double): Double = TODO()

/**
 * Средняя
 *
 * Поменять порядок цифр заданного числа n на обратный: 13478 -> 87431.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun revert(n: Int): Int {
    var l = n
    var num = 0
    while (l > 0) {
        if (l / 10 != 0)
            num = (num + l % 10) * 10
        else
            num += l % 10
        l /= 10
    }
    return num
}

/**
 * Средняя
 *
 * Проверить, является ли заданное число n палиндромом:
 * первая цифра равна последней, вторая -- предпоследней и так далее.
 * 15751 -- палиндром, 3653 -- нет.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */


fun isPalindrome(n: Int): Boolean {
    var r = revert(abs(n))
    var l = abs(n)
    var bool = true
    while (l > 0) {
        if (l % 10 != r % 10)
            bool = false
        r /= 10
        l /= 10
    }
    return bool
}

/**
 * Средняя
 *
 * Для заданного числа n определить, содержит ли оно различающиеся цифры.
 * Например, 54 и 323 состоят из разных цифр, а 111 и 0 из одинаковых.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun hasDifferentDigits(n: Int): Boolean {
    var l = abs(n)
    var j = l % 10
    var bool = false
    while (l > 9) {
        if ((l / 10) % 10 != j)
            bool = true
        l /= 10
        j = l % 10
    }
    return if (abs(n) < 10)
        false
    else
        bool
}

/**
 * Сложная
 *
 * Найти n-ю цифру последовательности из квадратов целых чисел:
 * 149162536496481100121144...
 * Например, 2-я цифра равна 4, 7-я 5, 12-я 6.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun squareSequenceDigit(n: Int): Int = TODO()
// Пока не готово
/**{
var k: Int = 1
var j: Int = 1
var big: Long = 1
var num: Int = 0
var square: Int = 0
var ten: Long = 10
while (j != n) {
j += num
ten = 10
k += 1
square = k * k
num = 0
while (square != 0) {
num += 1
square /= 10
}
for (i in 1..num) ten *= 10
big = big * 10 + k * k
for (i in 1..num) {
if (j + i == n) {
j = n
}
}
}
big %= 10
return big.toInt()
}
 */


/**
 * Сложная
 *
 * Найти n-ю цифру последовательности из чисел Фибоначчи (см. функцию fib выше):
 * 1123581321345589144...
 * Например, 2-я цифра равна 1, 9-я 2, 14-я 5.
 *
 * Использовать операции со строками в этой задаче запрещается.
 */
fun fibSequenceDigit(n: Int): Int = TODO()
